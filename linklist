#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node *next;
}*start;


create_list()
{
        int data;
        struct node *q,*temp;
        temp=malloc(sizeof (struct node));
        q=malloc (sizeof (struct node));
        printf("Please enter the data:");
        scanf("%d",&temp-> data);
        temp->next=NULL;
        if(start==NULL)
          start=temp;
        else
        {
                q=start;
                while(q-> next!=NULL)
                {
                        q=q->next;
                }
                q->next=temp;
        }
}

display()
{
        struct node *q;
        q=malloc(sizeof (struct node));
        if(start==NULL)
        {
                printf("List is empty \n");
        }
        q=start;
        printf("List is:\n");
        while(q!=NULL)
        {
                printf("%d\n",q->data);
                q=q->next;
        }
}



insert_beg()
{
        struct node *temp;
        temp=malloc (sizeof (struct node));
        printf("Enter data part:");
        scanf("%d",&temp->data);
        temp->next=NULL;
        temp->next=start;
        start=temp;
}


insert_mid()
{
        int pos, data,i;
        struct node *q,*temp;
        temp=malloc(sizeof (struct node));
        q=malloc (sizeof (struct node));
        q=start;
        printf("Enter the position of node:");
        scanf("%d",&pos);
        printf("Please enter the data part:");
        scanf("%d",&data);
        for(i=1;i<pos-i;i++);
        {
                q=q->next;
                if(q==NULL)
                {
                        printf("There are less %d elements in the list.",pos);
                        return;
                }
        }
        temp->data=data;
        temp->next=q->next;
        q-> next=temp;
}

insert_end()
{
        int data;
        struct node *q,*temp;
        temp=malloc(sizeof (struct node));
        q=malloc (sizeof (struct node));
        q=start;
        printf("Please enter the data:");
        scanf("%d",&data);
        temp->data=data;
        temp->next=NULL;
        while(q->next!=NULL)
        {
                q=q->next;
        }
        q->next=temp;
}


delete_beg()
{
        struct node *temp;
        temp=malloc(sizeof (struct node));
        temp=start;
        start=temp->next;
        free(temp);
}

delete_mid()
{
        int pos,i;
        struct node *q,*temp;
        temp=malloc(sizeof (struct node));
        q=malloc (sizeof (struct node));
        q=start;
        printf("Enter the position of node:");
        scanf("%d",&pos);
        for(i=1;i<pos-i;i++);
        {
                q=q->next;
                if(q==NULL)
                {
                        printf("There are less %d elements in the list.",pos);
                }
        }
        temp=q->next;
        q->next=temp->next;
        free(temp);
}

delete_end()
{
        struct node *temp,*q;
        temp=malloc(sizeof (struct node));
        q=malloc(sizeof (struct node));
        q=start;
        while(q->next->next!=NULL)
        {
                q=q->next;
        }
        temp=q->next;
        q->next=NULL;
        free(temp);
}

count()
{
    int count=0;
    struct node *q;
    q=malloc(sizeof (struct node));
    q=start;
    while(q!=NULL)
    {
        q=q->next;
        count++;
    }
    printf("Total no. of node %d",count);
}

search()
{
    int item,pos=1;
    struct node *q;
    q=malloc(sizeof (struct node));
    q=start;
    printf("Enter the item we want to search:");
    scanf("%d",&item);
    while(q!=NULL)
    {
        if(q->data==item)
        {
            printf("%d found at position %d\n",item,pos);
            return 0;
        }
        q=q->next;
        pos++;
    }
    if(q==NULL)
    {
        printf("Item not found.\n");
    }
}


reverse()
{
    struct node *p1, *p2, *p3;
    p1=malloc(sizeof(struct node));
    p2=malloc(sizeof(struct node));
    p3=malloc(sizeof(struct node));
    if(start->next==NULL)
    {
        printf("Only one element");
        return;
    }
    p1=start;
    p2=p1->next;
    p3=p2->next;
    p1->next=NULL;
    p2->next=p1;
    while(p3!=NULL)
    {
        p1=p2;
        p2=p3;
        p3=p2->next;
        p2->next=p1;
    }
    start=p2;
}

main()
{
        int choice,n,m,pos,i;
        start=NULL;
        while(1)
        {
                printf("\n1.Create list \n");
                printf("2.Display \n");
                printf("3.Insert at beginning \n");
                printf("4.Insert at middle \n");
                printf("5.Insert at end \n");
                printf("6.Delete at beginning \n");
                printf("7.Delete at middle \n");
                printf("8.Delete at end \n");
                printf("9.Count the no. of nodes \n");
                printf("10.Search the item \n");
                printf("11.Reverse\n");
                printf("12.Quit \n");
                printf("\nYour choice:");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1: printf("How many nodes:");
                                scanf("%d",&n);
                                for(i=0;i<n;i++)
                                {
                                   create_list();
                                }
                                break;
                        case 2:
                                display ();
                                break;
                        case 3:
                                insert_beg();
                                break;
                        case 4:
                                insert_mid();
                                break;
                        case 5:
                                insert_end();
                                break;
                        case 6:
                                delete_beg();
                                break;
                        case 7:
                                delete_mid();
                                break;
                        case 8:
                                delete_end();
                                break;
                        case 9:
                                count();
                                break;
                        case 10:
                                search();
                                break;
                        case 11:
                                reverse();
                                break;
                        case 12:
                                exit(1);
                                break;
                        default:
                                printf("Please enter a valid choice");
                }
        }
}
